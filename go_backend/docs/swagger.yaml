basePath: /v1
definitions:
  model.AddressSignupInput:
    properties:
      address:
        type: string
      city:
        type: string
      state:
        type: string
      zipCode:
        type: string
    type: object
  model.CompanyAddressRecordSignupInput:
    properties:
      AddressID:
        type: string
      CompanyID:
        type: string
    type: object
  model.CompanySignupInput:
    properties:
      companyName:
        type: string
      einID:
        type: string
      fedID:
        type: string
    type: object
  model.LoginOutput:
    properties:
      password:
        type: string
      userID:
        type: string
    type: object
  model.Message:
    properties:
      message:
        example: message
        type: string
    type: object
  model.SignupInput:
    properties:
      companyID:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      secureAnswer:
        type: string
      secureQuestion:
        type: string
      userIdentity:
        type: string
    type: object
  model.SignupOutput:
    properties:
      companyID:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      secureAnswer:
        type: string
      secureQuestion:
        type: string
      status:
        type: string
      userIdentity:
        type: string
    type: object
  model.UpdateInput:
    properties:
      email:
        type: string
      status:
        type: string
    type: object
host: localhost:8080/api
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a hunger at home application backend server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Hunger At Home API
  version: "1.0"
paths:
  /company/addressCompanyAssociate/:
    post:
      consumes:
      - application/json
      description: get companyAddress associate record info and parse them to db
      parameters:
      - description: Add a record
        in: body
        name: companyInfo
        required: true
        schema:
          $ref: '#/definitions/model.CompanyAddressRecordSignupInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Add a new record to company address associate table
      tags:
      - company
  /company/addressSignUp/:
    post:
      consumes:
      - application/json
      description: get address info and parse them to db
      parameters:
      - description: Add an address
        in: body
        name: companyInfo
        required: true
        schema:
          $ref: '#/definitions/model.AddressSignupInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Add a new address
      tags:
      - company
  /company/companySignup/:
    post:
      consumes:
      - application/json
      description: get company info and parse them to db
      parameters:
      - description: Add a company
        in: body
        name: companyInfo
        required: true
        schema:
          $ref: '#/definitions/model.CompanySignupInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SignupOutput'
        "404":
          description: Can not find company
          schema:
            type: string
        "500":
          description: Server Issue
          schema:
            type: string
      summary: Add a new company
      tags:
      - company
  /user/login/{email}/{password}:
    get:
      consumes:
      - application/json
      description: use email address and password to login
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      - description: Password
        in: path
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginOutput'
        "404":
          description: Can not find user
          schema:
            type: string
        "500":
          description: Server Issue
          schema:
            type: string
      summary: Login using an existing account
      tags:
      - user
  /user/signup/:
    post:
      consumes:
      - application/json
      description: get user info and parse them to db
      parameters:
      - description: Add a user
        in: body
        name: userInfo
        required: true
        schema:
          $ref: '#/definitions/model.SignupInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SignupOutput'
        "404":
          description: Can not find user
          schema:
            type: string
        "500":
          description: Server Issue
          schema:
            type: string
      summary: Add a new user
      tags:
      - user
  /user/updateUserStatus/:
    post:
      consumes:
      - application/json
      description: update status by userID
      parameters:
      - description: Update user status
        in: body
        name: userInfo
        required: true
        schema:
          $ref: '#/definitions/model.UpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SignupOutput'
        "404":
          description: Can not find user
          schema:
            type: string
        "500":
          description: Server Issue
          schema:
            type: string
      summary: Update a status from "pending" to {status}
      tags:
      - user
swagger: "2.0"
