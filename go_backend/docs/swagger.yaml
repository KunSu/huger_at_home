basePath: /v1
definitions:
  model.AddItemInput:
    properties:
      expireDate:
        type: string
      foodCategory:
        type: string
      foodName:
        type: string
      quantity:
        type: string
      temperature:
        type: string
    type: object
  model.AddOrderInput:
    properties:
      addressID:
        type: string
      note:
        type: string
      orderType:
        type: string
      pickUpTime:
        type: string
      status:
        type: string
    type: object
  model.AddressListInput:
    properties:
      companyID:
        type: string
    type: object
  model.AddressListOutput:
    properties:
      address:
        type: string
      city:
        type: string
      state:
        type: string
      zipCode:
        type: string
    type: object
  model.AddressSignupInput:
    properties:
      address:
        type: string
      city:
        type: string
      state:
        type: string
      zipCode:
        type: string
    type: object
  model.CompanyAddressRecordSignupInput:
    properties:
      AddressID:
        type: string
      CompanyID:
        type: string
    type: object
  model.CompanyListOutput:
    properties:
      companyID:
        type: string
      companyName:
        type: string
    type: object
  model.CompanySignupInput:
    properties:
      companyName:
        type: string
      einID:
        type: string
      fedID:
        type: string
    type: object
  model.GetOrderListByDonorIDInput:
    properties:
      donorID:
        type: string
      status:
        type: string
    type: object
  model.GetOrderListByDonorIDOutput:
    properties:
      address:
        type: string
      note:
        type: string
      orderType:
        type: string
      pickUpTime:
        type: string
    type: object
  model.LoginOutput:
    properties:
      password:
        type: string
      userID:
        type: string
    type: object
  model.Message:
    properties:
      message:
        example: message
        type: string
    type: object
  model.OrderAssociateInput:
    properties:
      adminID:
        type: string
      donorID:
        type: string
      driverID:
        type: string
      orderID:
        description: ID
        type: string
      recipientID:
        type: string
    type: object
  model.OrderItemInput:
    properties:
      itemID:
        type: string
      orderID:
        description: ID
        type: string
    type: object
  model.SignupInput:
    properties:
      companyID:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      secureAnswer:
        type: string
      secureQuestion:
        type: string
      userIdentity:
        type: string
    type: object
  model.SignupOutput:
    properties:
      companyID:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      secureAnswer:
        type: string
      secureQuestion:
        type: string
      status:
        type: string
      userIdentity:
        type: string
    type: object
  model.UpdateInput:
    properties:
      email:
        type: string
      status:
        type: string
    type: object
  model.UpdateOrderAssociateInput:
    properties:
      adminID:
        type: string
      donorID:
        type: string
      driverID:
        type: string
      orderID:
        type: string
      recipientID:
        type: string
    type: object
  model.UpdateOrderStatusInput:
    properties:
      id:
        type: string
      status:
        type: string
    type: object
  model.UpdateTemperatureInput:
    properties:
      id:
        type: string
      temperature:
        type: string
    type: object
host: localhost:8080/api
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a hunger at home application backend server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Hunger At Home API
  version: "1.0"
paths:
  /company/addressCompanyAssociate/:
    post:
      consumes:
      - application/json
      description: get companyAddress associate record info and parse them to db
      parameters:
      - description: Add a record
        in: body
        name: companyInfo
        required: true
        schema:
          $ref: '#/definitions/model.CompanyAddressRecordSignupInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Add a new record to company address associate table
      tags:
      - company
  /company/addressList/:
    post:
      consumes:
      - application/json
      description: CompanyID as input then list of address in JSON as output
      parameters:
      - description: get an address list by its companyID
        in: body
        name: companyInfo
        required: true
        schema:
          $ref: '#/definitions/model.AddressListInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.AddressListOutput'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Get company adderss list based on Company ID
      tags:
      - company
  /company/addressSignUp/:
    post:
      consumes:
      - application/json
      description: get address info and parse them to db
      parameters:
      - description: Add an address
        in: body
        name: companyInfo
        required: true
        schema:
          $ref: '#/definitions/model.AddressSignupInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Add a new address
      tags:
      - company
  /company/companyList/:
    post:
      consumes:
      - application/json
      description: Return a JSON formated array of company
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.CompanyListOutput'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Get the whole company list with their IDs
      tags:
      - company
  /company/companySignup/:
    post:
      consumes:
      - application/json
      description: get company info and parse them to db
      parameters:
      - description: Add a company
        in: body
        name: companyInfo
        required: true
        schema:
          $ref: '#/definitions/model.CompanySignupInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SignupOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Add a new company
      tags:
      - company
  /order/addItem/:
    post:
      consumes:
      - application/json
      description: get item info and parse them to db
      parameters:
      - description: Add an item
        in: body
        name: orderInfo
        required: true
        schema:
          $ref: '#/definitions/model.AddItemInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Add a new item
      tags:
      - order
  /order/addOrder/:
    post:
      consumes:
      - application/json
      description: get order info and parse them to db
      parameters:
      - description: Add an order
        in: body
        name: orderInfo
        required: true
        schema:
          $ref: '#/definitions/model.AddOrderInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Add a new order
      tags:
      - order
  /order/addOrderAssociate/:
    post:
      consumes:
      - application/json
      description: get orderAssociate record and parse them to db
      parameters:
      - description: Add an orderAssociate record
        in: body
        name: orderInfo
        required: true
        schema:
          $ref: '#/definitions/model.OrderAssociateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Add a new orderAssociate record
      tags:
      - order
  /order/addOrderItemAssociate/:
    post:
      consumes:
      - application/json
      description: get orderItem record and parse them to db
      parameters:
      - description: Add an orderItem record
        in: body
        name: orderInfo
        required: true
        schema:
          $ref: '#/definitions/model.OrderItemInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Add a new orderItem record
      tags:
      - order
  /order/getOrderListByDonorID/:
    post:
      consumes:
      - application/json
      description: DonorID and the status exclude as input
      parameters:
      - description: get an order list exclude withdraw status by its donor ID
        in: body
        name: orderInfo
        required: true
        schema:
          $ref: '#/definitions/model.GetOrderListByDonorIDInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.GetOrderListByDonorIDOutput'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Get order details by donor ID while status is not withdraw
      tags:
      - order
  /order/updateItemTemperature/:
    post:
      consumes:
      - application/json
      description: get itemID and temperture info and update them in db
      parameters:
      - description: update an item temperature
        in: body
        name: orderInfo
        required: true
        schema:
          $ref: '#/definitions/model.UpdateTemperatureInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Update the order status
      tags:
      - order
  /order/updateOrderAssociate/:
    post:
      consumes:
      - application/json
      description: get ID information and update it in db
      parameters:
      - description: update the ID inforamtion of a record
        in: body
        name: orderInfo
        required: true
        schema:
          $ref: '#/definitions/model.UpdateOrderAssociateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Update the ID information, used by Admin
      tags:
      - order
  /order/updateOrderStatus/:
    post:
      consumes:
      - application/json
      description: get orderID and status info and update them in db
      parameters:
      - description: update an order status
        in: body
        name: orderInfo
        required: true
        schema:
          $ref: '#/definitions/model.UpdateOrderStatusInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Message'
      summary: Update the order status
      tags:
      - order
  /user/login/{email}/{password}:
    get:
      consumes:
      - application/json
      description: use email address and password to login
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      - description: Password
        in: path
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginOutput'
        "404":
          description: Can not find user
          schema:
            type: string
        "500":
          description: Server Issue
          schema:
            type: string
      summary: Login using an existing account
      tags:
      - user
  /user/signup/:
    post:
      consumes:
      - application/json
      description: get user info and parse them to db
      parameters:
      - description: Add a user
        in: body
        name: userInfo
        required: true
        schema:
          $ref: '#/definitions/model.SignupInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SignupOutput'
        "404":
          description: Can not find user
          schema:
            type: string
        "500":
          description: Server Issue
          schema:
            type: string
      summary: Add a new user
      tags:
      - user
  /user/updateUserStatus/:
    post:
      consumes:
      - application/json
      description: update status by userID
      parameters:
      - description: Update user status
        in: body
        name: userInfo
        required: true
        schema:
          $ref: '#/definitions/model.UpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SignupOutput'
        "404":
          description: Can not find user
          schema:
            type: string
        "500":
          description: Server Issue
          schema:
            type: string
      summary: Update a status from "pending" to {status}
      tags:
      - user
swagger: "2.0"
